import csv
import datetime
import os

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, FSInputFile

from sqlalchemy import select, extract, and_
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession

from config import CREATOR
from database.models.jobs import Jobs
from database.models.user import User
from keyboards.inline import users as inline
from utils.callbackdata import HoursJobs, DoctorsData, DoctorRate, SecondDoctorsData, SecondDoctorRate
from utils.state import UserState
from database.engine import create_session_maker
from aiogram.enums import ParseMode
from config import TOKEN
from aiogram.utils.keyboard import InlineKeyboardBuilder


doctor_price = {
    '–¢–µ—Ä–∞–ø–∏—è': 300,
    '–û—Ä—Ç–æ–ø–µ–¥–∏—è': 300,
    '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è': 300,
    '–•–∏—Ä—É—Ä–≥–∏—è': 330,
}


async def choose_doctor(bot: Bot, sessionmaker: async_sessionmaker):
    async with sessionmaker() as session:

        doctors = (await session.execute(select(User).where(User.is_doctor))).scalars()
        keyboard = inline.select_doctor(doctors)

        users = (await session.execute(select(User).where(User.is_assistant == True))).scalars()
        for user in users:
            text = f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.full_name}</b>\n\n–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω. C –∫–∞–∫–∏–º –≤—Ä–∞—á–æ–º –≤—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª–∏?'
            try:
                await bot.send_message(chat_id=user.id, text=text, reply_markup=keyboard)
            except:
                pass


async def select_doctor_hours(callback: CallbackQuery, callback_data: HoursJobs, state: FSMContext):
    await callback.message.delete()
    await state.update_data({'doctor': callback_data.id})

    text = 'C–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã c –Ω–∏–º —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏?'
    keyboard = inline.hours_jobs()
    await callback.message.answer(text=text, reply_markup=keyboard)


async def choose_second_doctor(callback: CallbackQuery, state: FSMContext, callback_data: DoctorsData, session: AsyncSession):
    await callback.message.delete()
    await state.set_data({'doctor_hours': callback_data.hours})

    if callback_data.hours == 0:
        text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç.'
        return await callback.message.answer(text=text)

    elif callback_data.hours == 12:
        text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–ø—Ä–∏—Ü–µ–ª—å–Ω—ã–π"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
                '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
        await state.set_state(UserState.wait_sighting)
        return await callback.message.answer(text=text)

    doctors = (await session.execute(select(User).where(User.is_doctor))).scalars()

    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–∏–º –µ—â—ë –≤—Ä–∞—á–æ–º —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–ª–∏.'
    keyboard = inline.select_second_doctor(doctors)
    await callback.message.answer(text=text, reply_markup=keyboard)


async def select_second_doctor_hours(callback: CallbackQuery, callback_data: HoursJobs, state: FSMContext):
    await callback.message.delete()

    if callback_data.id == -1:
        text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–ø—Ä–∏—Ü–µ–ª—å–Ω—ã–π"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
                '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
        await state.set_state(UserState.wait_sighting)
        return await callback.message.answer(text=text)
    
    await state.update_data({'second_doctor': callback_data.id})
    text = '–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã c –Ω–∏–º —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏?'
    keyboard = inline.second_doctor_hours_jobs()
    await callback.message.answer(text=text, reply_markup=keyboard)


async def get_count_jobs_one(callback: CallbackQuery, state: FSMContext, callback_data: SecondDoctorsData):
    await callback.message.delete()
    if callback_data.hours:
        await state.set_data({'second_doctor_hours': callback_data.hours})

    text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–ø—Ä–∏—Ü–µ–ª—å–Ω—ã–π"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
            '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
    await callback.message.answer(text=text)
    await state.set_state(UserState.wait_sighting)


async def get_count_jobs_two(message: Message, state: FSMContext):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    await state.update_data({'sighting': count})

    text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–û–ü–¢–ì"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
            '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
    await message.answer(text=text)
    await state.set_state(UserState.wait_optg)


async def get_count_jobs_three(message: Message, state: FSMContext):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    await state.update_data({'optg': count})

    text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–ö–¢"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
            '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
    await message.answer(text=text)
    await state.set_state(UserState.wait_kt)


async def get_count_jobs_four(message: Message, state: FSMContext):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    await state.update_data({'kt': count})

    text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–¢–†–ì"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
            '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
    await message.answer(text=text)
    await state.set_state(UserState.wait_trg)


async def get_count_jobs_five(message: Message, state: FSMContext):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    await state.update_data({'trg': count})

    text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–ó–∞–±–æ—Ä –∫—Ä–æ–≤–∏"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
            '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
    await message.answer(text=text)
    await state.set_state(UserState.wait_blood)


async def get_count_jobs_six(message: Message, state: FSMContext):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    await state.update_data({'blood': count})

    text = ('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä <b>"–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è"</b> –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏?\n\n'
            '* –ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0')
    await message.answer(text=text)
    await state.set_state(UserState.wait_implantation)


async def get_count_jobs_save(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    await state.update_data({'implantation': count})

    data = await state.get_data()
    jobs_all = (await session.execute(select(Jobs).where(and_(Jobs.user_id == message.from_user.id, Jobs.is_nurse == False))))

    try:
        for job in jobs_all:
            job.is_nurse = True
    except: 
        pass

    await session.commit()
    job = Jobs(
        user_id = message.from_user.id,
        doctor_id = data.get('doctor'),
        second_doctor_id = data.get('second_doctor'),
        date = datetime.datetime.now(),
        hours = data.get('doctor_hours'),
        second_doctor_hours = data.get('second_doctor_hours'),
        sighting = data.get('sighting'),
        optg=data.get('optg'),
        kt=data.get('kt'),
        trg=data.get('trg'),
        blood=data.get('blood'),
        implantation=data.get('implantation')
    )

    session.add(job)
    await session.commit()
    text = '‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.'
    await message.answer(text=text)
    await state.clear()
    user = (await session.execute(select(User).where(User.id == message.from_user.id))).scalar()
    text = (f'–°–µ–≥–æ–¥–Ω—è –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º {user.fio}.\n'
            f'–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É.')
    keyboard = inline.rate_doctor(job.id)
    try:
        await bot.send_message(chat_id=job.doctor_id, text=text, reply_markup=keyboard)
        keyboard = inline.rate_second_doctor(job.id)
        await bot.send_message(chat_id=job.second_doctor_id, text=text, reply_markup=keyboard)
    except:
        pass


async def save_rate(callback: CallbackQuery, callback_data: DoctorRate, session: AsyncSession):
    await callback.message.delete()

    job = (await session.execute(select(Jobs).where(Jobs.id == callback_data.job_id))).scalar()
    job.doctor_rate = callback_data.rate
    await session.commit()

    text = '‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'
    await callback.message.answer(text=text)


async def second_doctor_save_rate(callback: CallbackQuery, callback_data: SecondDoctorRate, session: AsyncSession):
    await callback.message.delete()

    job = (await session.execute(select(Jobs).where(Jobs.id == callback_data.job_id))).scalar()
    job.second_doctor_rate = callback_data.rate
    await session.commit()

    text = '‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'
    await callback.message.answer(text=text)


async def create_report(bot: Bot, sessionmaker: async_sessionmaker):
    async with sessionmaker() as session:
        month = datetime.datetime.now().month - 1
        year = datetime.datetime.now().year
        if month == 0:
            month = 12
            year -= 1

        #jobs = (await session.execute(select(Jobs).where(extract('month', Jobs.date) == month))).scalars()
        jobs = (await session.execute(select(Jobs))).scalars()
        users = (await session.execute(select(User).where(User.is_assistant == True))).scalars()
        data = []
        for user in users:
            jobs_user = (await session.execute(select(Jobs).where(and_((extract('month', Jobs.date) == month), (Jobs.user_id == user.id))))).scalars()
            total_hours = 0
            money = 0
            for job in jobs_user:
                doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()
                total_hours += job.hours
                price = doctor_price.get(doctor.position)
                if job.doctor_rate == 2:
                    price += 50
                elif job.doctor_rate == 1:
                    price += 25
                else:
                    pass

                if job.second_doctor_rate == 2:
                    price += 50
                elif job.second_doctor_rate == 1:
                    price += 25
                else:
                    pass

                seniority = datetime.datetime.now() - user.seniority
                seniority = seniority.days
                if seniority > 1825:
                    money += 42.5
                elif seniority > 1460:
                    money += 34
                elif seniority > 1095:
                    money += 25.5
                elif seniority > 730:
                    money += 17
                elif seniority > 365:
                    money += 8.5
                else:
                    pass

                if job.nurse_rate == 2:
                    price += 50
                elif job.nurse_rate == 1:
                    price += 25
                else:
                    pass

                money += price * job.hours

                sighting = job.sighting * 50
                optg = job.optg * 100
                kt = job.kt * 150
                trg = job.trg * 100
                blood = job.blood * 150
                implantation = job.implantation * 300

                money += sighting + optg + kt + trg + blood + implantation

            user_stats = {
                'fio': user.fio,
                'phone': user.phone,
                'count_hours': total_hours,
                'money': money
            }
            data.append(user_stats)

        data_jobs = []
        for job in jobs:
            user = (await session.execute(select(User).where(User.id == job.user_id))).scalar()
            doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()
            if doctor:
                job_user = {
                    'fio': user.fio,
                    'phone': user.phone,
                    'date': job.date.strftime('%d.%m.%Y'),
                    'hours': job.hours,
                    'doctor': doctor.fio,
                    'sighting': job.sighting,
                    'optg': job.optg,
                    'kt': job.kt,
                    'trg': job.trg,
                    'blood': job.blood,
                    'implantation': job.implantation,
                    'doctor_rate': job.doctor_rate,
                    'second_doctor_rate': job.second_doctor_rate,
                    'nurse_rate': job.nurse_rate,
                    'is_nurse': job.is_nurse
                }
                data_jobs.append(job_user)

        with open('assistants.csv', mode='w', encoding='windows-1251') as w_file:
            file_writer = csv.writer(w_file, delimiter=',', lineterminator='\r')
            file_writer.writerow(['–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤', '–†–∞—Å—á–µ—Ç'])
            for user in data:
                file_writer.writerow([user.get('fio'), user.get('phone'), user.get('count_hours'), user.get('money')])

        with open('jobs.csv', mode='w', encoding='windows-1251') as w_file:
            file_writer = csv.writer(w_file, delimiter=',', lineterminator='\r')
            file_writer.writerow(['–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞', '–û—Ç—Ä–∞–±–æ—Ç–∞–ª —á–∞—Å–æ–≤', '–î–æ–∫—Ç–æ—Ä', '–û—Ç—Ä–∞–±–æ—Ç–∞–ª —á–∞—Å–æ–≤', '–í—Ç–æ—Ä–æ–π –î–æ–∫—Ç–æ—Ä', '–ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π', '–û–ü–¢–ì', '–ö–¢', '–¢–†–ì', '–ó–∞–±–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏', '–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è', '–û—Ü–µ–Ω–∫–∞ –≤—Ä–∞—á–∞', '–û—Ü–µ–Ω–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–∞—á–∞' '–û—Ü–µ–Ω–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã'])
            for job in data_jobs:
                file_writer.writerow([job.get('fio'), job.get('phone'), job.get('date'), job.get('hours'), job.get('doctor'), job.get('second_doctor_hours'), job.get('second_doctor'), job.get('sighting'), job.get('optg'), job.get('kt'), job.get('trg'), job.get('blood'), job.get('implantation'), '–û—Ç–ª–∏—á–Ω–æ' if job.get('doctor_rate') == 3 else '–•–æ—Ä–æ—à–æ' if job.get('doctor_rate') == 1 else '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–û—Ç–ª–∏—á–Ω–æ' if job.get('second_doctor_rate') == 3 else '–•–æ—Ä–æ—à–æ' if job.get('second_doctor_rate') == 1 else '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–û—Ç–ª–∏—á–Ω–æ' if job.get('nurse_rate') == 3 else '–•–æ—Ä–æ—à–æ' if job.get('nurse_rate') == 1 else '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–î–∞' if job.get('is_nurse') == 1 else '–ù–µ—Ç'])

        file_assistants = FSInputFile(path='assistants.csv')
        file_jobs = FSInputFile(path='jobs.csv')

        text = '‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.'

        try:
            await bot.send_document(chat_id=CREATOR, document=file_assistants)
            await bot.send_document(chat_id=CREATOR, document=file_jobs)
            await bot.send_message(chat_id=CREATOR, text=text)
        except:
            pass

        users = (await session.execute(select(User).where(User.is_admin == True))).scalars()
        for user in users:
            try:
                await bot.send_document(chat_id=user.id, document=file_assistants)
                await bot.send_document(chat_id=user.id, document=file_jobs)
                await bot.send_message(chat_id=user.id, text=text)
            except:
                pass

    os.remove('assistants.csv')
    os.remove('jobs.csv')


async def rate_assistants(bot: Bot, sessionmaker: async_sessionmaker):
    builder = InlineKeyboardBuilder()
    builder.button(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤', callback_data='GetCheckAssistant')
    keyboard = builder.adjust(1).as_markup()

    async with sessionmaker() as session:

        nurses = (await session.execute(select(User).where(User.is_nurse))).scalars()

        for nurse in nurses:
            text = f'–û—Ü–µ–Ω–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤!'
            try:
                await bot.send_message(chat_id=nurse.id, text=text, reply_markup=keyboard)
            except:
                pass