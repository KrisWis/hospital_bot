import datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from database.models.jobs import Jobs
from database.models.user import User
from keyboards.inline import users as inline
from utils.callbackdata import CheckAssistant, SaveRateAssistant
from utils.state import UserState


async def command_start(message: Message | CallbackQuery, session: AsyncSession, state: FSMContext, is_admin: bool):
    await state.clear()
    user = (await session.execute(select(User).where(User.id == message.from_user.id))).scalar_one_or_none()

    if not user:
        session.add(User(
            id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            register_date=datetime.datetime.now()
        ))
        await session.commit()

    user = (await session.execute(select(User).where(User.id == message.from_user.id))).scalar_one()
    if user.is_assistant:
        role = 'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'
    elif user.is_doctor:
        role = 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á'
    elif user.is_nurse:
        role = 'üßë‚Äç‚öïÔ∏è –°—Ç–∞—Ä—à–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞'
    else:
        role = '‚ùå –ë–µ–∑ —Ä–æ–ª–∏'
    text = (f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>\n\n'
            f'–í–∞—à–∞ —Ä–æ–ª—å: <b>{role}</b>\n'
            f'–í–∞—à user_id: <code>{message.from_user.id}</code>\n\n'
            f'–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É —Å–≤–æ–π user_id.')

    if is_admin or user.is_nurse:
        keyboard = inline.main_menu(is_admin, user.is_nurse)

    if isinstance(message, CallbackQuery):
        await message.message.delete()
        message = message.message

    if is_admin or user.is_nurse:
        await message.answer(text=text, reply_markup=keyboard)
    else:
        await message.answer(text=text)


async def get_check_assistant(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()

    jobs = (await session.execute(select(Jobs).where(Jobs.is_nurse == False))).scalars()

    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.'
    keyboard = await inline.check_assistant(jobs, session)
    await callback.message.answer(text=text, reply_markup=keyboard)


async def select_check_assistant(callback: CallbackQuery, session: AsyncSession, callback_data: CheckAssistant):
    await callback.message.delete()

    job = (await session.execute(select(Jobs).where(Jobs.id == callback_data.job_id))).scalar()
    user = (await session.execute(select(User).where(User.id == job.user_id))).scalar()
    doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()

    text = (f'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: <b>{user.fio}</b>\n'
            f'üïì –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã: <b>{job.date.strftime("%d.%m.%Y")}</b>\n'
            f'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b>{doctor.fio}</b>\n\n'
            f'‚è≥ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: <b>{job.hours} —á.</b>\n\n'
            f'‚ïî –ü—Ä–∏—Ü–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä: <b>{job.sighting}</b>\n'
            f'‚ï† –û–ü–¢–ì: <b>{job.optg}</b>\n'
            f'‚ï† –ö–¢: <b>{job.kt}</b>\n'
            f'‚ï† –¢–†–ì: <b>{job.trg}</b>\n'
            f'‚ï† –ó–∞–±–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏: <b>{job.blood}</b>\n'
            f'‚ïö –ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–π: <b>{job.implantation}</b>\n\n'
            f'üåü –û—Ü–µ–Ω–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞: <b>{"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if job.doctor_rate == 0 else "–•–æ—Ä–æ—à–æ" if job.doctor_rate == 1 else "–û—Ç–ª–∏—á–Ω–æ"}</b>\n'
            f'üåü –û—Ü–µ–Ω–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã: <b>{"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if job.nurse_rate == 0 else "–•–æ—Ä–æ—à–æ" if job.nurse_rate == 1 else "–û—Ç–ª–∏—á–Ω–æ"}</b>\n\n'
            f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É.')
    keyboard = inline.get_save_job(callback_data.job_id)
    await callback.message.answer(text=text, reply_markup=keyboard)


async def action_assistant(callback: CallbackQuery, callback_data: SaveRateAssistant, session: AsyncSession, state: FSMContext):
    if callback_data.action.startswith('edit'):
        await callback.message.delete()
        type_edit = callback_data.action.split('_')[1]
        await state.set_data({'job_id': callback_data.job_id, 'type': type_edit})
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.'
        await callback.message.answer(text=text)
        await state.set_state(UserState.wait_procedur)
    else:
        rate = int(callback_data.action.split('_')[1])
        job = (await session.execute(select(Jobs).where(Jobs.id == callback_data.job_id))).scalar()
        job.nurse_rate = rate
        await session.commit()

        job = (await session.execute(select(Jobs).where(Jobs.id == callback_data.job_id))).scalar()
        user = (await session.execute(select(User).where(User.id == job.user_id))).scalar()
        doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()

        text = (f'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: <b>{user.fio}</b>\n'
                f'üïì –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã: <b>{job.date.strftime("%d.%m.%Y")}</b>\n'
                f'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b>{doctor.fio}</b>\n\n'
                f'‚è≥ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: <b>{job.hours} —á.</b>\n\n'
                f'‚ïî –ü—Ä–∏—Ü–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä: <b>{job.sighting}</b>\n'
                f'‚ï† –û–ü–¢–ì: <b>{job.optg}</b>\n'
                f'‚ï† –ö–¢: <b>{job.kt}</b>\n'
                f'‚ï† –¢–†–ì: <b>{job.trg}</b>\n'
                f'‚ï† –ó–∞–±–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏: <b>{job.blood}</b>\n'
                f'‚ïö –ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–π: <b>{job.implantation}</b>\n\n'
                f'üåü –û—Ü–µ–Ω–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞: <b>{"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if job.doctor_rate == 0 else "–•–æ—Ä–æ—à–æ" if job.doctor_rate == 1 else "–û—Ç–ª–∏—á–Ω–æ"}</b>\n'
                f'üåü –û—Ü–µ–Ω–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã: <b>{"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if job.nurse_rate == 0 else "–•–æ—Ä–æ—à–æ" if job.nurse_rate == 1 else "–û—Ç–ª–∏—á–Ω–æ"}</b>\n\n'
                f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É.')
        keyboard = inline.get_save_job(callback_data.job_id)
        try:
            await callback.message.edit_text(text=text, reply_markup=keyboard)
        except:
            pass
        text = '‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.'
        await callback.answer(text=text, show_alert=True)


async def update_procedur(message: Message, state: FSMContext, session: AsyncSession):
    try:
        count = int(message.text)
    except:
        text = '‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)

    if count < 0:
        text = '‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.'
        return await message.answer(text=text)
    data = await state.get_data()
    job = (await session.execute(select(Jobs).where(Jobs.id == data.get('job_id')))).scalar()
    if data.get('type') == 'sighting':
        job.sighting = count
    elif data.get('type') == 'optg':
        job.optg = count
    elif data.get('type') == 'kt':
        job.kt = count
    elif data.get('type') == 'trg':
        job.trg = count
    elif data.get('type') == 'blood':
        job.blood = count
    elif data.get('type') == 'time':
        job.time = count
    else:
        job.implantation = count
    await session.commit()

    job = (await session.execute(select(Jobs).where(Jobs.id == data.get('job_id')))).scalar()
    user = (await session.execute(select(User).where(User.id == job.user_id))).scalar()
    doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()

    text = (f'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: <b>{user.fio}</b>\n'
            f'üïì –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã: <b>{job.date.strftime("%d.%m.%Y")}</b>\n'
            f'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b>{doctor.fio}</b>\n\n'
            f'‚è≥ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: <b>{job.hours} —á.</b>\n\n'
            f'‚ïî –ü—Ä–∏—Ü–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä: <b>{job.sighting}</b>\n'
            f'‚ï† –û–ü–¢–ì: <b>{job.optg}</b>\n'
            f'‚ï† –ö–¢: <b>{job.kt}</b>\n'
            f'‚ï† –¢–†–ì: <b>{job.trg}</b>\n'
            f'‚ï† –ó–∞–±–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏: <b>{job.blood}</b>\n'
            f'‚ïö –ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–π: <b>{job.implantation}</b>\n\n'
            f'üåü –û—Ü–µ–Ω–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞: <b>{"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if job.doctor_rate == 0 else "–•–æ—Ä–æ—à–æ" if job.doctor_rate == 1 else "–û—Ç–ª–∏—á–Ω–æ"}</b>\n'
            f'üåü –û—Ü–µ–Ω–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã: <b>{"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if job.nurse_rate == 0 else "–•–æ—Ä–æ—à–æ" if job.nurse_rate == 1 else "–û—Ç–ª–∏—á–Ω–æ"}</b>\n\n'
            f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—ã –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É.')
    keyboard = inline.get_save_job(data.get('job_id'))
    await message.answer(text=text, reply_markup=keyboard)


async def test_callback(callback: CallbackQuery):
    text = '‚ùå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –µ—â–µ –Ω–µ—Ç'
    await callback.answer(text=text, show_alert=True)
