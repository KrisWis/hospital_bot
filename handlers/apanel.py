import datetime
import json
import logging
import os

from aiogram import Bot
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from database.models.user import User
from keyboards.inline import apanel as inline
from config import folder_path, CREATOR
from utils.callbackdata import UserInfoData, SetRole, SetPosition
from utils.state import APanelState
from database.models.jobs import Jobs
from sqlalchemy import select, extract, and_
import csv

doctor_price = {
    '–¢–µ—Ä–∞–ø–∏—è': 300,
    '–û—Ä—Ç–æ–ø–µ–¥–∏—è': 300,
    '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è': 300,
    '–•–∏—Ä—É—Ä–≥–∏—è': 330,
}


async def apanel_menu_text(session: AsyncSession, bot: Bot):
    me = await bot.get_me()

    total_size = 0
    for path, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(path, file)
            total_size += os.path.getsize(file_path)
    folder_size_mb = total_size / (1024 * 1024)

    total_users = (await session.execute(select(func.count()).select_from(User))).scalar()
    total_blocked = (await session.execute(select(func.count()).select_from(User).where(User.is_block == True))).scalar()
    total_admins = (await session.execute(select(func.count()).select_from(User).where(User.is_admin == True))).scalar()

    text = (f'<b><a href="https://static.tildacdn.com/tild3365-3263-4766-b663-336234653965/orig.gif">ü§ñ</a> '
            f'–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º - @{me.username}</b>\n'
            f'‚ïî –í–µ—Ä—Å–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>1.0.0</b>\n'
            f'‚ï† –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞: <b>21.01.2024</b>\n'
            f'üóÇ –†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ —Å –±–æ—Ç–æ–º: <b>{folder_size_mb:.2f} –ú–±.</b>\n'
            f'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users} —á–µ–ª.</b>\n'
            f'‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: <b>{total_blocked} —á–µ–ª.</b>\n'
            f'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{total_admins} —á–µ–ª.</b>')

    return text


async def user_info(user: User):
    if user.id == CREATOR:
        creator = '\n\n<b>üíé –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞</b>'
    else:
        creator = ''
    try:
        seniority = datetime.datetime.now() - user.seniority
        seniority = seniority.days
    except:
        seniority = 0
    text = (f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n'
            f'‚ïî ID: <code>{user.id}</code>\n'
            f'‚ï† Username: @{user.username}\n'
            f'‚ï† –ò–º—è: <b>{user.full_name}</b>\n'
            f'‚ïö –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{user.register_date.strftime("%d.%m.%Y %H:%M")}</b>\n\n'
            f'‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: <b>{"–î–∞" if user.is_block else "–ù–µ—Ç"}</b>\n'
            f'üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{"–î–∞" if user.is_admin else "–ù–µ—Ç"}</b>{creator}\n'
            f'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: <b>{"–î–∞" if user.is_assistant else "–ù–µ—Ç"}</b>\n'
            f'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: <b>{"–î–∞" if user.is_doctor else "–ù–µ—Ç"}</b>\n'
            f'üßë‚Äç‚öïÔ∏è –°—Ç–∞—Ä—à–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞: <b>{"–î–∞" if user.is_nurse else "–ù–µ—Ç"}</b>\n\n'
            f'‚ïî –§–ò–û: <b>{user.fio}</b>\n'
            f'‚ï† –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{user.phone}</b>\n'
            f'‚ï† –î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{user.position}</b>\n'
            f'‚ï† –°—Ç–∞–∂: <b>{seniority} –¥–Ω.</b>\n'
            f'‚ïö –†–∞—Å—á–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ: <b>{user.calculation} —Ä—É–±.</b>')
    keyboard = inline.user_info(user.is_block, user.is_admin, user.id)

    return text, keyboard


async def get_apanel(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    await callback.message.delete()
    text = await apanel_menu_text(session, bot)
    keyboard = inline.main_menu()
    await callback.message.answer(text=text, reply_markup=keyboard)


async def apanel_refresh(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    text = await apanel_menu_text(session, bot)
    keyboard = inline.main_menu()
    try:
        await callback.message.edit_text(text=text, reply_markup=keyboard)
    except:
        await callback.answer()


async def get_users(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    text = '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ <b>user id</b> –∏–ª–∏ <b>username</b>.'
    keyboard = inline.return_apanel()
    message = await callback.message.answer(text=text, reply_markup=keyboard)
    await state.set_data({'message_id': message.message_id})
    await state.set_state(APanelState.wait_user)


async def select_user(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    await bot.delete_message(chat_id=message.from_user.id, message_id=data.get('message_id'))

    if message.content_type != ContentType.TEXT:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [1]</b>\n\n'
                '<i>* –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        keyboard = inline.return_apanel()
        msg = await message.answer(text=text, reply_markup=keyboard)
        return await state.set_data({'message_id': msg.message_id})

    if message.text[0] == '@':
        user_identifier = message.text[1:]
    else:
        user_identifier = message.text

    select_username = (await session.execute(select(User).where(User.username == user_identifier))).scalar_one_or_none()
    select_id = (await session.execute(select(User).where(User.id == user_identifier))).scalar_one_or_none()

    if not select_username and not select_id:
        text = f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_identifier}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!'
        return await message.answer(text=text)

    if select_username:
        user = select_username
    else:
        user = select_id

    text, keyboard = await user_info(user)
    await message.answer(text=text, reply_markup=keyboard)
    await state.clear()


async def edit_user(callback: CallbackQuery, callback_data: UserInfoData, session: AsyncSession, bot: Bot, state: FSMContext):
    user = (await session.execute(select(User).where(User.id == callback_data.user_id))).scalar_one()
    if callback_data.action == 'role':
        await callback.message.delete()
        if user.is_assistant:
            role = 'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'
        elif user.is_doctor:
            role = 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á'
        elif user.is_nurse:
            role = 'üßë‚Äç‚öïÔ∏è –°—Ç–∞—Ä—à–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞'
        else:
            role = '‚ùå –ë–µ–∑ —Ä–æ–ª–∏'
        text = (f'–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{role}</b>\n\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.')
        keyboard = inline.set_role(user.id)
        return await callback.message.answer(text=text, reply_markup=keyboard)

    if callback_data.action == 'info':
        await callback.message.delete()
        text = ('–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.\n'
                f'* –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {user.fio}')
        await state.set_data({'user_id': callback_data.user_id})
        await state.set_state(APanelState.wait_fio)
        return await callback.message.answer(text=text)

    if callback_data.user_id == callback.from_user.id:
        text = '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!'
        return await callback.answer(text=text, show_alert=True)

    if callback_data.user_id == CREATOR:
        text = '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞!'
        return await callback.answer(text=text, show_alert=True)

    if callback_data.action == 'unblock':
        user.is_block = False
        text = f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_data.user_id} (@{user.username}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!'
        text_user = ('<b>üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n'
                     f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{callback.from_user.id}</b> (@{callback.from_user.username}) —Å–Ω—è–ª –≤–∞–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É!')
        logging.info(msg=f'Administrator {callback.from_user.id} unblocking {callback_data.user_id}')
    elif callback_data.action == 'block':
        user.is_block = True
        text = f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_data.user_id} (@{user.username}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!'
        text_user = ('<b>üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n'
                     f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{callback.from_user.id}</b> (@{callback.from_user.username}) –≤—ã–¥–∞–ª –≤–∞–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É!')
        logging.info(msg=f'Administrator {callback.from_user.id} blocking {callback_data.user_id}')
    elif callback_data.action == 'unadmin':
        user.is_admin = False
        text = f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id} (@{user.username}) —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
        text_user = ('<b>üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n'
                     f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{callback.from_user.id}</b> (@{callback.from_user.username}) —Å–Ω—è–ª –≤–∞–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        logging.info(msg=f'Administrator {callback.from_user.id} removed administrative privileges {callback_data.user_id}')
    else:
        user.is_admin = True
        text = f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id} (@{user.username}) –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
        text_user = ('<b>üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n'
                     f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{callback.from_user.id}</b> (@{callback.from_user.username}) –≤—ã–¥–∞–ª –≤–∞–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        logging.info(msg=f'Administrator {callback.from_user.id} gave administrative privileges {callback_data.user_id}')
    await session.commit()

    await callback.answer(text=text, show_alert=True)

    user = (await session.execute(select(User).where(User.id == callback_data.user_id))).scalar_one()
    text, keyboard = await user_info(user)
    await callback.message.edit_text(text=text, reply_markup=keyboard)

    try:
        await bot.send_message(chat_id=callback_data.user_id, text=text_user)
    except:
        pass


async def get_users_base(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()

    text = '‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!'
    temp_msg = await callback.message.answer(text=text)

    users = (await session.execute(select(User))).scalars()

    data = {}

    for user in users:
        try:
            seniority = user.seniority.strftime('%d.%m.%Y %H:%M')
        except:
            seniority = 'None'
        data[user.id] = {
            'username': user.username,
            'full_name': user.full_name,
            'register_date': user.register_date.strftime('%d.%m.%Y %H:%M'),
            'is_block': user.is_block,
            'is_admin': user.is_admin,
            'phone': user.phone,
            'is_assistant': user.is_assistant,
            'is_doctor': user.is_doctor,
            'is_nurse': user.is_nurse,
            'fio': user.fio,
            'position': user.position,
            'seniority': seniority,
            'calculation': user.calculation
        }

    with open('files/users.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False)

    file = FSInputFile(path='files/users.json')
    text = '‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!'
    keyboard = inline.return_apanel()

    await temp_msg.delete()
    await callback.message.answer_document(document=file)
    await callback.message.answer(text=text, reply_markup=keyboard)


async def get_message(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!'
    await callback.message.answer(text=text)
    await state.set_state(APanelState.wait_message)


async def get_message_get_name(message: Message, state: FSMContext):
    await state.clear()
    await state.set_data({'message_id': message.message_id})

    text = '–ñ–µ–ª–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π –≤ —Ä–∞—Å—Å—ã–ª–∫—É?'
    keyboard = inline.message_url()
    await message.answer(text=text, reply_markup=keyboard)


async def get_message_url_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.'
    await callback.message.answer(text=text)
    await state.set_state(APanelState.wait_message_name)


async def get_message_get_url(message: Message, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [1]</b>\n\n'
                '<i>* –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        return await message.answer(text=text)

    if len(message.text) > 30:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [2]</b>\n\n'
                '<i>* –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        return await message.answer(text=text)

    await state.update_data({'name': message.text})

    text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏.'
    await message.answer(text=text)
    await state.set_state(APanelState.wait_message_url)


async def start_message(message: Message | CallbackQuery, state: FSMContext, bot: Bot, session: AsyncSession):
    if isinstance(message, Message):
        if message.content_type != ContentType.TEXT:
            text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [1]</b>\n\n'
                    '<i>* –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
            return await message.answer(text=text)
        url = True
        await state.update_data({'url': message.text})
        my_id = message.from_user.id
    else:
        await message.message.delete()
        my_id = message.from_user.id
        message = message.message
        url = False

    data = await state.get_data()
    await state.clear()

    users = (await session.execute(select(User))).scalars()
    total = (await session.execute(func.count(User.id))).scalar()

    count, success, error = 0, 0, 0

    text = (f'<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n'
            f'‚îå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count}</b> –∏–∑ <b>{total}.</b>\n'
            f'‚îú –£—Å–ø–µ—à–Ω–æ: <b>{success}.</b>\n'
            f'‚îî –° –æ—à–∏–±–∫–æ–π: <b>{error}.</b>')

    message_ = await message.answer(text=text)

    for user in users:
        count += 1
        if count % 10 == 0:
            text = (f'<b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n'
                    f'‚îå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count}</b> –∏–∑ <b>{total}.</b>\n'
                    f'‚îú –£—Å–ø–µ—à–Ω–æ: <b>{success}.</b>\n'
                    f'‚îî –° –æ—à–∏–±–∫–æ–π: <b>{error}.</b>')
            await message_.edit_text(text=text)

        try:
            if url:
                keyboard = inline.message_kb(data.get('name'), data.get('url'))
                await bot.copy_message(chat_id=user.id, from_chat_id=my_id, message_id=data.get('message_id'), reply_markup=keyboard)
            else:
                await bot.copy_message(chat_id=user.id, from_chat_id=my_id, message_id=data.get('message_id'))
            success += 1
        except:
            error += 1

    text = (f'<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n'
            f'‚îå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count}.</b>\n'
            f'‚îú –£—Å–ø–µ—à–Ω–æ: <b>{success}.</b>\n'
            f'‚îî –° –æ—à–∏–±–∫–æ–π: <b>{error}.</b>')
    keyboard = inline.return_apanel()
    await message_.edit_text(text=text, reply_markup=keyboard)


async def save_role_user(callback: CallbackQuery, session: AsyncSession, callback_data: SetRole, bot: Bot):
    await callback.message.delete()
    user = (await session.execute(select(User).where(User.id == callback_data.user_id))).scalar_one()
    if callback_data.role == 'assistant':
        user.is_assistant = True
        user.is_doctor = False
        user.is_nurse = False
        role = 'üë©‚Äç‚öïÔ∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'
    elif callback_data.role == 'doctor':
        user.is_assistant = False
        user.is_doctor = True
        user.is_nurse = False
        role = 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á'
    elif callback_data.role == 'nurse':
        user.is_assistant = False
        user.is_doctor = False
        user.is_nurse = True
        role = 'üßë‚Äç‚öïÔ∏è –°—Ç–∞—Ä—à–∞—è –º–µ–¥—Å–µ—Å—Ç—Ä–∞'
    else:
        user.is_assistant = False
        user.is_doctor = False
        user.is_nurse = False
        role = '‚ùå –ë–µ–∑ —Ä–æ–ª–∏'
    await session.commit()
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{callback_data.user_id}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å <b>{role}</b>'
    keyboard = inline.set_data(callback_data.user_id)
    await callback.message.answer(text=text, reply_markup=keyboard)

    text = f'‚úÖ –í–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å. –ù–æ–≤–∞—è —Ä–æ–ª—å: <b>{role}</b>'
    try:
        await bot.send_message(chat_id=callback_data.user_id, text=text)
    except:
        pass


async def get_phone_number(message: Message, state: FSMContext, session: AsyncSession):
    if message.content_type != ContentType.TEXT:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [1]</b>\n\n'
                '<i>* –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        return await message.answer(text=text)
    data = await state.get_data()
    user = (await session.execute(select(User).where(User.id == data.get('user_id')))).scalar_one()

    text = ('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
            f'* –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {user.phone}')
    await state.update_data({'fio': message.text})
    await state.set_state(APanelState.wait_phone)
    await message.answer(text=text)


async def get_position(message: Message, state: FSMContext, session: AsyncSession):
    if message.content_type != ContentType.TEXT:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [1]</b>\n\n'
                '<i>* –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        return await message.answer(text=text)
    data = await state.get_data()
    user = (await session.execute(select(User).where(User.id == data.get('user_id')))).scalar_one()

    text = ('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n'
            f'* –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {user.position}')
    await state.update_data({'phone': message.text})
    keyboard = inline.get_position()
    await message.answer(text=text, reply_markup=keyboard)


async def get_start_date(callback: CallbackQuery, session: AsyncSession, callback_data: SetPosition, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    user = (await session.execute(select(User).where(User.id == data.get('user_id')))).scalar_one()

    text = ('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì\n'
            f'* –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {user.position}')
    await state.update_data({'position': callback_data.type})
    await state.set_state(APanelState.wait_date_start)
    await callback.message.answer(text=text)


async def get_save_user(message: Message, session: AsyncSession, state: FSMContext):
    if message.content_type != ContentType.TEXT:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [1]</b>\n\n'
                '<i>* –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        return await message.answer(text=text)
    data = await state.get_data()
    user = (await session.execute(select(User).where(User.id == data.get('user_id')))).scalar_one()

    try:
        date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
    except:
        text = ('‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ [6]</b>\n\n'
                '<i>* –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!</i>')
        return await message.answer(text=text)

    user.fio = data.get('fio')
    user.phone = data.get('phone')
    user.position = data.get('position')
    user.seniority = date

    await session.commit()
    text = '‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'
    keyboard = inline.return_user_search()
    await message.answer(text=text, reply_markup=keyboard)
    await state.clear()


async def get_report(callback: CallbackQuery, session: AsyncSession):
    async with session:
        month = datetime.datetime.now().month - 1
        year = datetime.datetime.now().year
        if month == 0:
            month = 12
            year -= 1

        jobs = (await session.execute(select(Jobs))).scalars()
        users = (await session.execute(select(User).where(User.is_assistant == True))).scalars()
        data = []
        for user in users:
            jobs_user = (await session.execute(select(Jobs).where(and_((extract('month', Jobs.date) == month), (Jobs.user_id == user.id))))).scalars()
            total_hours = 0
            money = 0
            for job in jobs_user:
                doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()
                total_hours += job.hours
                price = doctor_price.get(doctor.position)
                if job.second_doctor_rate == 2:
                    price += 50
                elif job.second_doctor_rate == 1:
                    price += 25
                else:
                    pass

                seniority = datetime.datetime.now() - user.seniority
                seniority = seniority.days
                if seniority > 1825:
                    money += 42.5
                elif seniority > 1460:
                    money += 34
                elif seniority > 1095:
                    money += 25.5
                elif seniority > 730:
                    money += 17
                elif seniority > 365:
                    money += 8.5
                else:
                    pass

                if job.nurse_rate == 2:
                    price += 50
                elif job.nurse_rate == 1:
                    price += 25
                else:
                    pass

                money += price * job.hours

                sighting = job.sighting * 50
                optg = job.optg * 100
                kt = job.kt * 150
                trg = job.trg * 100
                blood = job.blood * 150
                implantation = job.implantation * 300

                money += sighting + optg + kt + trg + blood + implantation

            user_stats = {
                'fio': user.fio,
                'phone': user.phone,
                'count_hours': total_hours,
                'money': money
            }
            data.append(user_stats)

        data_jobs = []
        for job in jobs:
            user = (await session.execute(select(User).where(User.id == job.user_id))).scalar()
            doctor = (await session.execute(select(User).where(User.id == job.doctor_id))).scalar()
            if doctor:
                job_user = {
                    'fio': user.fio,
                    'phone': user.phone,
                    'date': job.date.strftime('%d.%m.%Y'),
                    'hours': job.hours,
                    'doctor': doctor.fio,
                    'sighting': job.sighting,
                    'optg': job.optg,
                    'kt': job.kt,
                    'trg': job.trg,
                    'blood': job.blood,
                    'implantation': job.implantation,
                    'doctor_rate': job.doctor_rate,
                    'second_doctor_rate': job.second_doctor_rate,
                    'nurse_rate': job.nurse_rate,
                    'is_nurse': job.is_nurse
                }
                data_jobs.append(job_user)

        with open('assistants.csv', mode='w', encoding='windows-1251') as w_file:
            file_writer = csv.writer(w_file, delimiter=',', lineterminator='\r')
            file_writer.writerow(['–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤', '–†–∞—Å—á–µ—Ç'])
            for user in data:
                file_writer.writerow([user.get('fio'), user.get('phone'), user.get('count_hours'), user.get('money')])

        with open('jobs.csv', mode='w', encoding='windows-1251') as w_file:
            file_writer = csv.writer(w_file, delimiter=',', lineterminator='\r')
            file_writer.writerow(['–§–ò–û', '–¢–µ–ª–µ—Ñ–æ–Ω', '–î–∞—Ç–∞', '–û—Ç—Ä–∞–±–æ—Ç–∞–ª —á–∞—Å–æ–≤', '–î–æ–∫—Ç–æ—Ä', '–û—Ç—Ä–∞–±–æ—Ç–∞–ª —á–∞—Å–æ–≤', '–í—Ç–æ—Ä–æ–π –î–æ–∫—Ç–æ—Ä', '–ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π', '–û–ü–¢–ì', '–ö–¢', '–¢–†–ì', '–ó–∞–±–æ—Ä–æ–≤ –∫—Ä–æ–≤–∏', '–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è', '–û—Ü–µ–Ω–∫–∞ –≤—Ä–∞—á–∞', '–û—Ü–µ–Ω–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–∞—á–∞' '–û—Ü–µ–Ω–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥.—Å–µ—Å—Ç—Ä—ã'])
            for job in data_jobs:
                file_writer.writerow([job.get('fio'), job.get('phone'), job.get('date'), job.get('hours'), job.get('doctor'), job.get('second_doctor_hours'), job.get('second_doctor'), job.get('sighting'), job.get('optg'), job.get('kt'), job.get('trg'), job.get('blood'), job.get('implantation'), '–û—Ç–ª–∏—á–Ω–æ' if job.get('doctor_rate') == 3 else '–•–æ—Ä–æ—à–æ' if job.get('doctor_rate') == 1 else '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–û—Ç–ª–∏—á–Ω–æ' if job.get('second_doctor_rate') == 3 else '–•–æ—Ä–æ—à–æ' if job.get('second_doctor_rate') == 1 else '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–û—Ç–ª–∏—á–Ω–æ' if job.get('nurse_rate') == 3 else '–•–æ—Ä–æ—à–æ' if job.get('nurse_rate') == 1 else '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–î–∞' if job.get('is_nurse') == 1 else '–ù–µ—Ç'])

    file_assistants = FSInputFile(path='assistants.csv')
    file_jobs = FSInputFile(path='jobs.csv')

    text = '‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.'

    await callback.message.answer_document(document=file_assistants)
    await callback.message.answer_document(document=file_jobs)
    await callback.message.answer(text=text)

    os.remove('assistants.csv')
    os.remove('jobs.csv')